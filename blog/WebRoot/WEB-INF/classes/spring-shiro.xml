<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">
       
  	<description> Shiro 配置</description>
  	 <!-- 自定义Realm -->    
    <bean id="myShiroRealm" class="com.blog.shiro.MyShiroRealm">
    	 <property name="credentialsMatcher">
             <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                 <property name="hashAlgorithmName" value="MD5"></property>
                 <property name="hashIterations" value="1024"></property>
                 
                 <property name="storedCredentialsHexEncoded" value="true"></property>            
             </bean>
         </property>
    </bean>
    
    <!-- 定义缓存管理器  -->  
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
          <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/> 
    </bean> 
    
    <!-- 定义session管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
	     <!-- session的失效时长，单位毫秒 -->
	     <!-- 设置全局会话超时时间，默认30分钟，即如果30分钟内没有访问会话将过期 1800000 -->
	     <property name="globalSessionTimeout" value="600000"/>
	     <!-- 删除失效的session -->
	     <property name="deleteInvalidSessions" value="true"/>
	     <!-- 是否开启会话验证器，默认是开启的 -->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <!-- Shiro提供SessionDAO用于会话的CRUD -->
        <property name="sessionDAO" ref="sessionDAO"/>        
        <property name="sessionIdCookie">
            <bean class="org.apache.shiro.web.servlet.SimpleCookie">
                <!-- <constructor-arg name="name" value="shiro.sesssion"/>
                <property name="path" value="/" /> -->
                <constructor-arg name="name" value="jeesite.session.id"/>
            </bean>
        </property>
        
    </bean>
    
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.MemorySessionDAO"/>
   
        <!-- 配置shiro安全管理器 -->                  
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
	   	 <property name="realm" ref="myShiroRealm"/>
	   	 <!-- 缓存管理器 -->
	   	 <property name="cacheManager" ref="cacheManager"/>
	   	 <!-- 会话管理 -->
	   	 <property name="sessionManager" ref="sessionManager" />    	
    </bean>
    
    <!-- shiro过滤器 -->	
    <!-- <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean"> -->
        <bean id="shiroFilter" class="com.blog.shiro.MyShiroFilterFactoryBean">
     	<property name="securityManager" ref="securityManager"/>
     	<property name="loginUrl" value="/user/index.html" /> <!-- 未登录请求需登录页面跳转 -->
        <property name="successUrl" value="/loginsuccess.html" /><!-- 登录成功跳转页面 -->  
        <property name="unauthorizedUrl" value="/user/error.html" />  <!-- 没有权限默认跳转页面 -->
        <!-- Shiro连接约束配置,即过滤链的定义 -->  
        <!-- 此处可配合这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->  
        <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->  
        <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->  
        <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->  
        <property name="filterChainDefinitions" >
        	 <value>
        		/index.html = anon 
              <!--   /** = anon  -->  
        	</value> 
        </property> 
    </bean>
    
      <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->  
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />  

	 <!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->  
    <!-- 配置以下两个bean即可实现此功能 -->  
    <!-- Enable Shiro Annotations for Spring-configured beans. Only run after the lifecycleBeanProcessor has run -->  
    <!-- 由于本例中并未使用Shiro注解,故注释掉这两个bean(个人觉得将权限通过注解的方式硬编码在程序中,查看起来不是很方便,没必要使用) -->   
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"  
        depends-on="lifecycleBeanPostProcessor">  
        <property name="proxyTargetClass" value="true" />  
    </bean>  
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
        <property name="securityManager" ref="securityManager" />  
    </bean>             
</beans>  